1. Create Sample Table with Data
Before working with stored procedures, let's create a sample table and
insert values.
CREATE TABLE employees (
id INT PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(100),
department VARCHAR(50),
salary INT
);
INSERT INTO employees (name, department, salary)
VALUES ('Alice Johnson', 'HR', 50000),
('Bob Smith', 'IT', 60000),
('Charlie Brown', 'Finance', 70000),
('David Miller', 'IT', 55000);
2. Creating a Simple Stored Procedure
Definition: A stored procedure is a precompiled collection of SQL
statements that can be executed as a single unit.
Example: Create a procedure to fetch all employees.
DELIMITER //
CREATE PROCEDURE GetAllEmployees()
BEGIN
SELECT * FROM employees;
END //
DELIMITER ;
Call the Procedure:
CALL GetAllEmployees();
3. Stored Procedure with Input Parameter
Example: Create a procedure to fetch employees by department.
DELIMITER //
CREATE PROCEDURE GetEmployeesByDepartment(IN dept_name
VARCHAR(50))
BEGIN
SELECT * FROM employees WHERE department = dept_name;
END //
DELIMITER ;
Call the Procedure:
CALL GetEmployeesByDepartment('IT');
4. Stored Procedure with Output Parameter
Example: Create a procedure to return the total number of employees.
DELIMITER //
CREATE PROCEDURE GetEmployeeCount(OUT total
INT) BEGIN
SELECT COUNT(*) INTO total FROM employees;
END //
DELIMITER ;
Call the Procedure:
CALL GetEmployeeCount(@count);
SELECT @count;
5. Stored Procedure with Input and Output
Parameters Example: Get the total salary for a specific
department.
DELIMITER //
CREATE PROCEDURE GetTotalSalary(IN dept_name VARCHAR(50),
OUT total_salary INT)
BEGIN
SELECT SUM(salary) INTO total_salary FROM employees WHERE
department = dept_name;
END //
DELIMITER ;
Call the Procedure:
CALL GetTotalSalary('IT', @total_salary);
SELECT @total_salary;
6. Dropping a Stored Procedure
Example: Drop the GetAllEmployees procedure.
DROP PROCEDURE GetAllEmployees;
