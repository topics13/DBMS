1. Create Sample Tables with Data
Before implementing set operations, let's create two sample tables and insert some
values.
CREATE TABLE employees_A (
id INT PRIMARY KEY,
name VARCHAR(100),
department VARCHAR(50)
);
INSERT INTO employees_A (id, name, department) VALUES
(1, 'Alice Johnson', 'HR'),
(2, 'Bob Smith', 'IT'),
(3, 'Charlie Brown', 'Finance');
CREATE TABLE employees_B (
id INT PRIMARY KEY,
name VARCHAR(100),
department VARCHAR(50)
);
INSERT INTO employees_B (id, name, department) VALUES
(2, 'Bob Smith', 'IT'),
(3, 'Charlie Brown', 'Finance'),
(4, 'David Miller', 'Marketing');
2. UNION - Combine Results from Two Queries
Definition: The UNION operator combines the results of two queries and removes
duplicate rows.
Example: Retrieve all unique employees from both tables.
SELECT * FROM employees_A
UNION
SELECT * FROM employees_B;
3. UNION ALL - Combine Results Without Removing Duplicates
Definition: The UNION ALL operator combines the results of two queries and
retains duplicates.
Example: Retrieve all employees from both tables, including duplicates.
SELECT * FROM employees_A
UNION ALL
SELECT * FROM employees_B;
4. INTERSECTION - Find Common Records
Definition: SQL does not have a direct INTERSECT keyword in MySQL, but we can
achieve it using INNER JOIN.
Example: Retrieve employees who are present in both tables.
SELECT employees_A.* FROM employees_A
INNER JOIN employees_B ON employees_A.id = employees_B.id;
5. SET DIFFERENCE - Find Records in One Table but Not in the Other
Definition: SQL does not have a direct EXCEPT or MINUS keyword in MySQL, but
we can use LEFT JOIN and WHERE.
Example: Retrieve employees who are in employees_A but not in employees_B.
SELECT * FROM employees_A
LEFT JOIN employees_B ON employees_A.id =
employees_B.id WHERE employees_B.id IS NULL;
Example: Retrieve employees who are in employees_B but not in employees_A.
SELECT * FROM employees_B
LEFT JOIN employees_A ON employees_B.id = employees_A.id
WHERE employees_A.id IS NULL;
